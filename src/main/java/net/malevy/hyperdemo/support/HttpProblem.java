package net.malevy.hyperdemo.support;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import lombok.Builder;
import lombok.Getter;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

/**
 * This document defines a "problem detail" as a way to carry machine- readable details of errors
 * in a HTTP response, to avoid the need to invent new error response formats for HTTP APIs.
 * https://tools.ietf.org/html/draft-nottingham-http-problem-06
 */
public class HttpProblem {

    /**
     * An absolute URI [RFC3986] that identifies the problem type.
     * When dereferenced, it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML [W3C.REC-html401-19991224]).  When this member is not present, its
     * value is assumed to be "about:blank".
     */
    private @Getter URI type;

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence
     * to occurrence of the problem, except for purposes of localisation.
     */
    private @Getter final String title;

    /**
     * The HTTP status code ([RFC2616], Section 6) generated by the origin server for this occurrence of the problem.
     * "detail" (string) - An human readable explanation specific to this occurrence of the problem.
     */
    private @Getter final int status;

    /**
     * An absolute URI that identifies the specific occurrence of the problem.  It may or may not yield further
     * information if dereferenced.
     */
    private @Getter URI instance;

    /**
     * Problem type definitions MAY extend the problem details object with additional members.
     */
    private final Map<String, Object> additional = new HashMap<>();

    @Builder
    public HttpProblem(String title, int status) {
        this.title = title;
        this.status = status;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditional() { return this.additional;}
}
